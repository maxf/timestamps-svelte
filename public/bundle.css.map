{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/TimestampManager.svelte"
  ],
  "sourcesContent": [
    "<script>\n import { onMount } from 'svelte';\n\n export let name;\n\n const appState = {\n   timestamps: [], // array of Date\n   newTimestamp: null, // null or { date, month1, year, hours, minutes }\n   message: {level:0, text:null}, // error level and message text\n   importVisible: false,\n   dataToImport: null // null or JSON string to convert to timestamps\n };\n\n const showMessage = (text, level) =>\n   appState.message = {level:level||0, text};\n\n const clearMessage = () =>\n   appState.message = {level:0, text: null};\n\n const pad = (n, d) => n.toString().padStart(d, '0');\n\n const formatTimestamp = d =>\n   `${d.getDate()}/${d.getMonth() + 1}/${pad(d.getFullYear(),4)}`\n                          + ', '\n                          + `${d.getHours()}:${pad(d.getMinutes(),2)}`\n                          + '\\n';\n\n const isObject = a => (!!a) && (a.constructor === Object);\n\n const getSavedData = () => {\n   const storedDataString = localStorage.getItem('timestamps');\n   let parsedDataObject;\n   try {\n     parsedDataObject = JSON.parse(storedDataString);\n   } catch (error) {\n     showMessage('failed to parse localstorage json.', 1);\n     parsedDataObject = null;\n   }\n   if (!isObject(parsedDataObject)) {\n     showMessage('Failed to get data from localstorage');\n     localStorage.setItem('timestamps', '{}');\n     parsedDataObject = {};\n   }\n   return parsedDataObject;\n }\n\n const getFromLocalStorage = name => {\n   const localData = getSavedData();\n   return localData[name] ?\n          localData[name].map(isoDate => new Date(Date.parse(isoDate)))\n        : [];\n };\n\n const saveToLocalStorage = (name, timestamps) => {\n   const localData = getSavedData();\n   localData[name] = timestamps;\n   localStorage.setItem('timestamps', JSON.stringify(localData));\n };\n\n const deleteFromLocalStorage = name => {\n   const localData = getSavedData();\n   delete localData[name];\n   localStorage.setItem('timestamps', JSON.stringify(localData));\n };\n\n const prepareNewTimestamp = () => {\n   clearMessage();\n   var now = new Date();\n   appState.newTimestamp = {\n     date: now.getDate(),\n     month1: now.getMonth() + 1,\n     year: now.getFullYear(),\n     hours: now.getHours(),\n     minutes: now.getMinutes()\n   }\n };\n\n const isValidDate = d => d instanceof Date && !isNaN(d);\n\n const addTimestamp = () => {\n   const d = appState.newTimestamp;\n   const newDate = new Date(d.year, d.month1 - 1, d.date, d.hours, d.minutes);\n   if (isValidDate(newDate)) {\n     appState.timestamps.push(newDate);\n     saveToLocalStorage(name, appState.timestamps.sort((a, b) => a-b));\n     appState.newTimestamp = null;\n     showMessage('timestamp added');\n   } else {\n     showMessage('error adding timestamp',1);\n   }\n };\n\n const deleteTimestamp = (timestampToRemove) => {\n   appState.timestamps =\n     appState.timestamps.filter(t => t !== timestampToRemove);\n };\n\n\n const exportTimestamps = () => {\n   const copyJson = JSON.stringify(appState.timestamps);\n   navigator.clipboard.writeText(copyJson);\n   showMessage('timestamps copied');\n };\n\n const toggleImport = () => {\n   appState.importVisible = !appState.importVisible;\n   appState.dataToImport = '';\n }\n\n const doImport = () => {\n   try {\n     const newTsData = JSON.parse(appState.dataToImport);\n     appState.importVisible = false;\n     appState.timestamps = newTsData.map(dateString => new Date(dateString));\n     appState.newTimestamp = null;\n     saveToLocalStorage(name, newTsData);\n     showMessage('imported JSON', 0);\n   } catch (e) {\n     showMessage('error importing JSON', 1);\n   }\n };\n\n const cancelAddTimestamp = () => {\n   appState.newTimestamp = null;\n   clearMessage();\n }\n\n const reset = () => {\n   appState.timestamps = [];\n   appState.newTimestamp = null;\n   deleteFromLocalStorage(name);\n   showMessage('erased all data');\n };\n\n // copy the timestamps to the clipboard\n const copy = () => {\n   const copyText = appState.timestamps\n                            .map(formatTimestamp)\n                            .join('');\n   navigator.clipboard.writeText(copyText);\n   showMessage('timestamps copied');\n };\n\n // chart functions\n const dayOfTimestamp = t => Math.floor(t / (1000 * 3600 * 24));\n const timeOfTimestamp = t => t - dayOfTimestamp(t)*1000*3600*24;\n\n const chartViewBox = (timestamps) => {\n   const minTs = Math.min.apply(this, timestamps);\n   const maxTs = Math.max.apply(this, timestamps);\n   const xmin = dayOfTimestamp(minTs);\n   const xmax = dayOfTimestamp(maxTs);\n   const ymin = 0;\n   const ymax = 24 * 3600;\n   return `${xmin} ${ymin} ${xmax-xmin+1} ${ymax-ymin}`;\n };\n\n\n\n // start\n onMount(() => {\n   appState.timestamps = getFromLocalStorage(name);\n   appState.newTimestamp = null;\n });\n\n\n\n\n\n</script>\n\n<!-- ############################################################################### -->\n\n<style>\n\n .component {\n   border: 1px solid #64f;\n   margin: 3px;\n   background: white;\n   border-radius: 10px;\n   padding: 10px;\n   width: 206px;\n }\n\n .date-2 { width: 2em; }\n\n .date-4 { width: 4em; }\n\n button {\n   padding: 0;\n   border: 1px solid white;\n   border-radius: 10px;\n   background: #32f;\n   color: white;\n }\n\n button:active {\n   background: #118;\n }\n\n .date-input {\n   margin-top: 1em;\n }\n\n .import-input {\n   width: 100%;\n }\n\n button.add {\n   background: #e55;\n }\n\n button.big {\n   width: 100px;\n   height: 100px;\n }\n\n button.small {\n   width: 80px;\n   height: 30px;\n }\n\n button.del {\n   font-weight: bold;\n   margin-left: .5em;\n   background: #ddd;\n   padding: 3px;\n }\n\n ul {\n   padding-left: 0;\n }\n\n li {\n   list-style-type: none;\n }\n\n h1 {\n   font-size: 30px;\n   margin: 0 0 10px 0;\n }\n\n .message {\n   margin-bottom: .5em;\n   text-align: center;\n }\n\n .message > .level-0 {\n   background: #3f3;\n   padding: 0 .2em 0 .2em;\n   border-radius: 5px;\n }\n\n .message > .level-1 {\n   color: white;\n   background: #f00;\n   padding: 0 .2em 0 .2em;\n   border-radius: 4px;\n }\n\n .ts-list {\n   height: 5em;\n   overflow-y: auto;\n   border: 1px solid black;\n }\n\n svg {\n   border: 1px solid black;\n   margin-bottom: .5em;\n   background: #ddd;\n }\n\n</style>\n\n\n<!-- ############################################################################### -->\n\n<div class=\"component\">\n  <h1><img src=\"clock-icon-192.png\" alt=\"clock icon\" height=\"20px\"/> {name}</h1>\n  {#if appState.message.text}\n  <div class=\"message\">\n    <span class=\"level-{appState.message.level}\">{appState.message.text}</span>\n  </div>\n  {/if}\n  {#if !appState.newTimestamp}\n  <button class=\"big\" on:click={prepareNewTimestamp}>New</button>\n  {:else}\n  <button class=\"big add\" on:click={addTimestamp}>Add</button>\n  <button class=\"big\" on:click={cancelAddTimestamp}>Cancel</button>\n  <div class=\"date-input\">\n    <input class=\"date-2\" bind:value={appState.newTimestamp.date} inputmode=\"numeric\"/>/<input class=\"date-2\" bind:value={appState.newTimestamp.month1} inputmode=\"numeric\"/>\n    @\n    <input class=\"date-2\" bind:value={appState.newTimestamp.hours} inputmode=\"numeric\"/>:<input class=\"date-2\" bind:value={appState.newTimestamp.minutes} inputmode=\"numeric\"/>\n  </div>\n  {/if}\n\n  {#if appState.timestamps.length }\n  <ul class=\"ts-list\">\n    {#each appState.timestamps.sort((a,b) => b - a) as t}\n    <li>{ formatTimestamp(t) }\n      <button class=\"del\" on:click={() => deleteTimestamp(t)}>‚ùå</button>\n    </li>\n    {/each}\n  </ul>\n  <button class=\"small\" on:click={copy}>Copy</button>\n  <button class=\"small\" on:click={reset}>Reset</button>\n\n  <svg viewBox=\"{ chartViewBox(appState.timestamps) }\" preserveAspectRatio=\"none\" width=\"100%\" height=\"200px\">\n    {#each appState.timestamps as t}\n    <rect x=\"{dayOfTimestamp(t)}\" y=\"{timeOfTimestamp(t)/1000}\" width=\"1\" height=\"1000\" fill=\"red\"/>\n    {/each}\n  </svg>\n  <button class=\"small\" on:click={exportTimestamps}>Export</button>\n  {/if}\n\n  <button class=\"small\" on:click={toggleImport}>Import</button>\n  {#if appState.importVisible}\n  <input class=\"import-input\" bind:value={appState.dataToImport}/>\n  <button class=\"small\" on:click={doImport}>Go</button>\n  {/if}\n\n\n</div>\n"
  ],
  "names": [],
  "mappings": "AA+KC,UAAU,eAAC,CAAC,AACV,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,MAAM,CAAE,GAAG,CACX,UAAU,CAAE,KAAK,CACjB,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,KAAK,AACd,CAAC,AAED,OAAO,eAAC,CAAC,AAAC,KAAK,CAAE,GAAG,AAAE,CAAC,AAEvB,OAAO,eAAC,CAAC,AAAC,KAAK,CAAE,GAAG,AAAE,CAAC,AAEvB,MAAM,eAAC,CAAC,AACN,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,KAAK,AACd,CAAC,AAED,qBAAM,OAAO,AAAC,CAAC,AACb,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,WAAW,eAAC,CAAC,AACX,UAAU,CAAE,GAAG,AACjB,CAAC,AAED,aAAa,eAAC,CAAC,AACb,KAAK,CAAE,IAAI,AACb,CAAC,AAED,MAAM,IAAI,eAAC,CAAC,AACV,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,MAAM,IAAI,eAAC,CAAC,AACV,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,AACf,CAAC,AAED,MAAM,MAAM,eAAC,CAAC,AACZ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC,AAED,MAAM,IAAI,eAAC,CAAC,AACV,WAAW,CAAE,IAAI,CACjB,WAAW,CAAE,IAAI,CACjB,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,GAAG,AACd,CAAC,AAED,EAAE,eAAC,CAAC,AACF,YAAY,CAAE,CAAC,AACjB,CAAC,AAED,EAAE,eAAC,CAAC,AACF,eAAe,CAAE,IAAI,AACvB,CAAC,AAED,EAAE,eAAC,CAAC,AACF,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,AACpB,CAAC,AAED,QAAQ,eAAC,CAAC,AACR,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,MAAM,AACpB,CAAC,AAED,uBAAQ,CAAG,QAAQ,eAAC,CAAC,AACnB,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CACtB,aAAa,CAAE,GAAG,AACpB,CAAC,AAED,uBAAQ,CAAG,QAAQ,eAAC,CAAC,AACnB,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CACtB,aAAa,CAAE,GAAG,AACpB,CAAC,AAED,QAAQ,eAAC,CAAC,AACR,MAAM,CAAE,GAAG,CACX,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,AACzB,CAAC,AAED,GAAG,eAAC,CAAC,AACH,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,IAAI,AAClB,CAAC"
}